{"version":3,"sources":["YearSelect.tsx","Table.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["YearSelect","values","value","setValue","className","Select","onChange","event","target","itemsAsNumbers","items","item","push","MenuItem","key","addMenuItems","fullData","useStyles","makeStyles","theme","root","width","head","backgroundColor","palette","primary","light","container","maxHeight","appBarSpacer","mixins","toolbar","OwnTable","classes","initialYear","Math","max","map","d","year","availableYears","Array","from","Set","sort","reverse","React","useState","setYear","order","direction","orderManager","setOrder","filteredData","data","filter","entry","filterYear","filterData","a","b","Paper","AppBar","TableContainer","Table","stickyHeader","size","TableHead","TableRow","TableCell","align","TableSortLabel","onClick","TableBody","row","title","meta_score","user_score","Date","release_date_ts","toLocaleString","day","month","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bfbaed67.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Select, MenuItem } from \"@material-ui/core\";\r\n\r\ninterface YearSelectProps {\r\n  values: number[];\r\n  value: number;\r\n  setValue: React.Dispatch<number>;\r\n}\r\n\r\nconst YearSelect: React.FC<YearSelectProps> = ({ values, value, setValue }) => {\r\n  return (\r\n    <div className=\"YearSelectContainer\">\r\n      <Select\r\n        value={value}\r\n        onChange={event => setValue(event.target.value as number)}\r\n      >\r\n        {addMenuItems(values)}\r\n      </Select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YearSelect;\r\n\r\nfunction addMenuItems(itemsAsNumbers: number[]) {\r\n  var items = [];\r\n  for (let item of itemsAsNumbers) {\r\n    items.push(\r\n      <MenuItem key={\"MenuItem-\" + item} value={item}>\r\n        {item}\r\n      </MenuItem>\r\n    );\r\n  }\r\n  return items;\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport YearSelect from \"./YearSelect\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\n\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\n\r\nimport blue from \"@material-ui/core/colors/blue\";\r\n\r\nimport rawData from \"./metacritic.json\";\r\n\r\ninterface MetaCriticDataRecord {\r\n  title: string;\r\n  meta_score: number;\r\n  user_score: number;\r\n  release_date_ts: number;\r\n  year: number;\r\n}\r\n\r\nconst fullData = rawData as Array<MetaCriticDataRecord>;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"100%\"\r\n  },\r\n  head: {\r\n    backgroundColor: theme.palette.primary.light\r\n  },\r\n  container: {\r\n    maxHeight: \"89vh\"\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar\r\n}));\r\n\r\nfunction generalRenderTableHeader() {\r\n  let header = Object.keys(fullData[0]);\r\n  return header.map((key, index) => {\r\n    return <th key={index}>{key.toUpperCase()}</th>;\r\n  });\r\n}\r\n\r\nfunction renderTableRow(data: MetaCriticDataRecord) {\r\n  let date = new Date(data.release_date_ts * 1000);\r\n  return (\r\n    <tr key={data.title}>\r\n      <td>{data.title}</td>\r\n      <td>{data.meta_score}</td>\r\n      <td>{data.user_score}</td>\r\n      <td>\r\n        {date.toLocaleString(\"default\", { day: \"numeric\", month: \"long\" })}\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nfunction renderTableRows(data: Array<MetaCriticDataRecord>) {\r\n  return <tbody>{data.map(s => renderTableRow(s))}</tbody>;\r\n}\r\n\r\nfunction filterYear(data: Array<MetaCriticDataRecord>, year: number) {\r\n  return data.filter(entry => entry.year === year);\r\n}\r\n\r\n//function filterPlatform(data: Array<MetaCriticDataRecord>, platform: string) {\r\n//  return data.filter(entry => entry.platform === platform);\r\n//}\r\n\r\nfunction filterData(data: Array<MetaCriticDataRecord>, year: number) {\r\n  return filterYear(data, year);\r\n}\r\n\r\nconst OwnTable: React.FC = () => {\r\n  const classes = useStyles();\r\n\r\n  const initialYear = Math.max(...fullData.map(d => d.year));\r\n  const availableYears = Array.from(new Set(fullData.map(d => d.year)))\r\n    .sort()\r\n    .reverse();\r\n  const [year, setYear] = React.useState(initialYear);\r\n\r\n  //const availablePlatforms = Array.from(\r\n  //  new Set(fullData.map(d => d.platform))\r\n  //).sort();\r\n  //const initialPlatform = availablePlatforms[0];\r\n  //const [platform, setPlatform] = React.useState(initialPlatform);\r\n\r\n  interface OrderManager {\r\n    order: \"meta_score\" | \"user_score\" | \"release_date_ts\";\r\n    direction: 1 | -1;\r\n  }\r\n  const initialOrderManager: OrderManager = {\r\n    order: \"meta_score\",\r\n    direction: 1\r\n  };\r\n  const [orderManager, setOrder] = React.useState(initialOrderManager);\r\n\r\n  const filteredData = filterData(fullData, year).sort((a, b) => {\r\n    if (a[orderManager.order] > b[orderManager.order]) {\r\n      return -1 * orderManager.direction;\r\n    }\r\n    if (a[orderManager.order] < b[orderManager.order]) {\r\n      return 1 * orderManager.direction;\r\n    }\r\n    return 0;\r\n  });\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <AppBar>\r\n        METACRITIC - PC GAMES BY YEAR\r\n        <div />\r\n        <YearSelect values={availableYears} value={year} setValue={setYear} />\r\n      </AppBar>\r\n      <div className={classes.appBarSpacer} />\r\n      <TableContainer className={classes.container}>\r\n        <Table stickyHeader size=\"small\" className={classes.appBarSpacer}>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell className={classes.head}>TITLE</TableCell>\r\n              <TableCell className={classes.head} align=\"center\">\r\n                <TableSortLabel\r\n                  direction={orderManager.direction === 1 ? \"asc\" : \"desc\"}\r\n                  onClick={() =>\r\n                    orderManager.order === \"meta_score\"\r\n                      ? setOrder({\r\n                          order: \"meta_score\",\r\n                          direction: orderManager.direction === -1 ? 1 : -1\r\n                        })\r\n                      : setOrder({ order: \"meta_score\", direction: 1 })\r\n                  }\r\n                >\r\n                  META SCORE\r\n                </TableSortLabel>\r\n              </TableCell>\r\n              <TableCell className={classes.head} align=\"center\">\r\n                <TableSortLabel\r\n                  direction={orderManager.direction === 1 ? \"asc\" : \"desc\"}\r\n                  onClick={() =>\r\n                    orderManager.order === \"user_score\"\r\n                      ? setOrder({\r\n                          order: \"user_score\",\r\n                          direction: orderManager.direction === -1 ? 1 : -1\r\n                        })\r\n                      : setOrder({ order: \"user_score\", direction: 1 })\r\n                  }\r\n                >\r\n                  USER SCORE\r\n                </TableSortLabel>\r\n              </TableCell>\r\n              <TableCell className={classes.head} align=\"left\">\r\n                <TableSortLabel\r\n                  direction={orderManager.direction === 1 ? \"asc\" : \"desc\"}\r\n                  onClick={() =>\r\n                    orderManager.order === \"release_date_ts\"\r\n                      ? setOrder({\r\n                          order: \"release_date_ts\",\r\n                          direction: orderManager.direction === -1 ? 1 : -1\r\n                        })\r\n                      : setOrder({ order: \"release_date_ts\", direction: 1 })\r\n                  }\r\n                >\r\n                  RELEASE DATE\r\n                </TableSortLabel>\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {filteredData.map(row => (\r\n              <TableRow key={row.title}>\r\n                <TableCell align=\"left\">{row.title}</TableCell>\r\n                <TableCell align=\"center\">{row.meta_score}</TableCell>\r\n                <TableCell align=\"center\">{row.user_score}</TableCell>\r\n                <TableCell align=\"left\">\r\n                  {new Date(row.release_date_ts * 1000).toLocaleString(\r\n                    \"default\",\r\n                    {\r\n                      day: \"numeric\",\r\n                      month: \"long\"\r\n                    }\r\n                  )}\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Paper>\r\n  );\r\n};\r\nexport default OwnTable;\r\n\r\n//<Container>\r\n//<AppBar position=\"static\">\r\n//  FILTERABLE METACRITIC PC GAMES BY YEAR\r\n//  <YearSelect values={availableYears} value={year} setValue={setYear} />\r\n//</AppBar>\r\n//<Paper>\r\n//  <table id=\"metacritic-table\">\r\n//    <tr key={\"header\"}>\r\n//      <th>\r\n//        <Button variant=\"contained\" endIcon={<Icon>send</Icon>}>\r\n//          TITLE\r\n//        </Button>\r\n//      </th>\r\n//      <th>META_SCORE</th>\r\n//      <th>USER SCORE</th>\r\n//      <th>DATE</th>\r\n//    </tr>\r\n//    {renderTableRows(filteredData)}\r\n//  </table>\r\n//</Paper>\r\n//</Container>\r\n","import React from \"react\";\nimport \"./App.css\";\nimport OwnTable from \"./Table\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <OwnTable />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}